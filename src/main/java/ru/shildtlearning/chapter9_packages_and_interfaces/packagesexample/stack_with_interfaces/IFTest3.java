package ru.shildtlearning.chapter9_packages_and_interfaces.packagesexample.stack_with_interfaces;

// Создать переменную ссылки на интерфейс и организовать через нее доступ к стекам
// В этом примере мы задействуем оба класса, реализующих интерфейс и динамически будем выбирать реализацию методов
class IFTest3 {
    public static void main(String[] args) {
        IntStack mystack; // создаем ссылку на интерфейс
        DynamicStack dynStack = new DynamicStack(5); // создаем объект класса с динамически расширяемым стеком
        FixedStack fixStack = new FixedStack(8); // создаем объект класса со стеком постоянного размера

        mystack = dynStack; // ссылку на интерфейс переводим на объект класса с динамическим стеком

        // Поместить несколько чисел в стеки
        for(int i=0; i<12; i++) mystack.push(i); // вызываем метод push() из интерфейса. как бы "жмем кнопку на пульте"
        // при этом интерфейс у нас сейчас связан с динамическим стеком

        mystack = fixStack; // ссылку на интерфейс переводим на объект класса с фиксированным стеком
        for(int i=0; i<8; i++) mystack.push(i); // вызываем метод push() из интерфейса
        // при этом мы взаимодействуем со стеком фиксированного размера

        mystack = dynStack; // снова перевели ссылку интерфейса на класс с динамическим стеком
        System.out.println("Значения в стеке с динамическим размером:");
        for(int i=0; i<12; i++)
            System.out.println(mystack.pop()); // вызываем метод из интерфейса, который здесь реализуется за счет
        // класса с динамическим стеком

        mystack = fixStack; // переводим ссылку интерфейса на класс с фиксированным стеком
        System.out.println("Значения в классе с фиксированным стеком:");
        for(int i=0; i<8; i++)
            System.out.println(mystack.pop()); // вызываем метод из интерфейса, который здесь реализуется за счет
        // класса с фиксированным стеком
    }
}
